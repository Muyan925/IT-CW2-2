{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"NoteTypes\",\n  data() {\n    return {\n      types: [],\n      multipleSelection: []\n    };\n  },\n  methods: {\n    addType(typeName) {\n      this.$axios.post('/Type/AddType', {\n        typeName,\n        uId: this.uid\n      }).then(response => {\n        if (response.data.flag) {\n          this.$message.success(response.data.msg);\n          this.getTypesList();\n        } else {\n          this.$message.error(response.data.msg);\n        }\n      });\n    },\n    deleteType(tid) {\n      this.$axios.post(`/Type/DeleteTypeByTid/${tid}`).then(response => {\n        if (response.data.flag) {\n          this.$message.success(response.data.msg);\n          this.getTypesList();\n        } else {\n          this.$message.error(response.data.msg);\n        }\n      });\n    },\n    modifyType(typeName, tid) {\n      this.$axios.post('/Type/UpdateTypeByTid', {\n        typeName,\n        uId: this.uid,\n        tId: tid\n      }).then(response => {\n        if (response.data.flag) {\n          this.$message.success(response.data.msg);\n          this.getTypesList();\n        } else {\n          this.$message.error(response.data.msg);\n        }\n      });\n    },\n    getTypesList() {\n      this.$axios.get(`/Type/GetTypeListByUid/${this.uid}`).then(response => {\n        if (response.data.flag) {\n          this.types = response.data.data;\n        } else {\n          this.$message.error(response.data.msg);\n        }\n        console.log(response.data);\n      });\n    },\n    handleAdd() {\n      this.$prompt('Please enter the name of the type', 'prompts', {\n        confirmButtonText: 'OK',\n        cancelButtonText: 'cancel'\n      }).then(({\n        value\n      }) => {\n        this.addType(value);\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: 'Cancel input'\n        });\n      });\n    },\n    handleEdit(tid) {\n      this.$prompt('Please enter a new type name', 'prompts', {\n        confirmButtonText: 'OK',\n        cancelButtonText: '取消'\n      }).then(({\n        value\n      }) => {\n        this.modifyType(value, tid);\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '取消输入'\n        });\n      });\n    },\n    handleDelete(tid) {\n      this.$confirm('此操作将永久删除此条记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.deleteType(tid);\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    handleSelectionChange(v) {\n      this.multipleSelection = v;\n    },\n    handleMultipleDelete() {\n      if (this.multipleSelection.length === 0) {\n        this.$message.info(\"请先选中数据\");\n        return;\n      }\n      this.$confirm(\"此操作将永久删除所有选中的记录, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        let tids = [];\n        this.multipleSelection.forEach(item => {\n          tids.push(item.tId);\n        });\n        const formData = new FormData();\n        formData.append(\"tIds\", tids);\n        this.$axios.post(`/Type/DeleteTypeByTid/`, formData).then(response => {\n          if (response.data.flag) {\n            this.$message.success(response.data.msg);\n            this.getTypesList();\n          } else {\n            this.$message.error(response.data.msg);\n          }\n        });\n      }).catch(() => {\n        this.$message({\n          type: \"info\",\n          message: \"已取消删除\"\n        });\n      });\n    }\n  },\n  computed: {\n    uid() {\n      return this.$store.getters['getUserId'];\n    },\n    username() {\n      return this.$store.getters['getUsername'];\n    }\n  },\n  created() {\n    this.getTypesList();\n  }\n};","map":{"version":3,"mappings":";AA+BA;EACAA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;QAAAC;QAAAC;MAAA;QACA;UACA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC;MACA;QACA;UACA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC;MACA;QAAAH;QAAAC;QAAAG;MAAA;QACA;UACA;UACA;QACA;UACA;QACA;MACA;IACA;IACAC;MACA;QACA;UACA;QACA;UACA;QACA;QACAC;MACA;IACA;IACAC;MACA;QACAC;QACAC;MACA;QAAAC;MAAA;QAEA;MAEA;QACA;UACAC;UACAC;QACA;MACA;IACA;IACAC;MACA;QACAL;QACAC;MACA;QAAAC;MAAA;QACA;MACA;QACA;UACAC;UACAC;QACA;MACA;IACA;IACAE;MACA;QACAN;QACAC;QACAE;MACA;QACA;MACA;QACA;UACAA;UACAC;QACA;MACA;IACA;IACAG;MACA;IACA;IACAC;MACA;QACA;QACA;MACA;MACA;QACAR;QACAC;QACAE;MACA;QACA;QACA;UACAM;QACA;QACA;QACAC;QACA,YACAC,yCACAC;UACA;YACA;YACA;UACA;YACA;UACA;QACA;MACA,GACAC;QACA;UACAV;UACAC;QACA;MACA;IACA;EACA;EACAU;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACA;EACA;AACA","names":["name","data","types","multipleSelection","methods","addType","typeName","uId","deleteType","modifyType","tId","getTypesList","console","handleAdd","confirmButtonText","cancelButtonText","value","type","message","handleEdit","handleDelete","handleSelectionChange","handleMultipleDelete","tids","formData","post","then","catch","computed","uid","username","created"],"sourceRoot":"src/pages","sources":["NoteTypes.vue"],"sourcesContent":["<template>\n  <div class=\"note-type\">\n    <div class=\"title\">Hello, {{username}}</div>\n    <div class=\"content\">\n      <div class=\"opts\">\n        <button class=\"add btn\" @click=\"handleAdd\">Add</button>\n        <button class=\"all-delete btn\" @click=\"handleMultipleDelete\">bulk delete</button>\n      </div>\n      <el-table height=\"500\"\n      :data=\"types\"\n      style=\"width: 100%; border: 1px solid #ccc;\"\n      @selection-change=\"handleSelectionChange\">\n        <el-table-column type=\"selection\" width=\"55\"> </el-table-column>\n        <el-table-column type=\"index\" label=\"Number\" width=\"100\"> </el-table-column>\n        <el-table-column label=\"typename\" prop=\"typeName\"> </el-table-column>\n        <el-table-column label=\"operation\" width=\"200\">\n          <template slot-scope=\"scope\">\n            <el-button type=\"primary\" class=\"el-icon-edit\" size=\"small\" @click=\"handleEdit(scope.row.tId)\"></el-button>\n            <el-button type=\"danger\" class=\"el-icon-delete\" size=\"small\" @click=\"handleDelete(scope.row.tId)\"></el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      <div class=\"pigination\" v-show=\"false\">\n        <el-pagination background layout=\"prev, pager, next\" :total=\"1000\">\n        </el-pagination>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"NoteTypes\",\n  data() {\n    return {\n        types: [],\n        multipleSelection: []\n    }\n  },\n  methods: {\n    addType(typeName) {\n      this.$axios.post('/Type/AddType', {typeName, uId: this.uid}).then(response => {\n        if (response.data.flag) {\n          this.$message.success(response.data.msg)\n          this.getTypesList()\n        } else {\n          this.$message.error(response.data.msg)\n        }\n      })\n    },\n    deleteType(tid) {\n      this.$axios.post(`/Type/DeleteTypeByTid/${tid}`).then(response => {\n        if (response.data.flag) {\n          this.$message.success(response.data.msg)\n          this.getTypesList()\n        } else {\n          this.$message.error(response.data.msg)\n        }\n      })\n    },\n    modifyType(typeName, tid) {\n      this.$axios.post('/Type/UpdateTypeByTid', {typeName, uId: this.uid, tId: tid}).then(response => {\n        if (response.data.flag) {\n          this.$message.success(response.data.msg)\n          this.getTypesList()\n        } else {\n          this.$message.error(response.data.msg)\n        }\n      })\n    },\n    getTypesList() {\n      this.$axios.get(`/Type/GetTypeListByUid/${this.uid}`).then(response => {\n        if (response.data.flag) {\n          this.types = response.data.data\n        } else {\n          this.$message.error(response.data.msg)\n        }\n        console.log(response.data);\n      })\n    },\n    handleAdd() {\n        this.$prompt('Please enter the name of the type', 'prompts', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'cancel',\n        }).then(({ value }) => {\n          \n          this.addType(value)\n     \n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Cancel input'\n          });       \n        });\n    },\n    handleEdit(tid) {\n        this.$prompt('Please enter a new type name', 'prompts', {\n          confirmButtonText: 'OK',\n          cancelButtonText: '取消',\n        }).then(({ value }) => {\n          this.modifyType(value, tid)\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '取消输入'\n          });       \n        });\n    },\n    handleDelete(tid) {\n        this.$confirm('此操作将永久删除此条记录, 是否继续?', '提示', {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning'\n            }).then(() => {\n            this.deleteType(tid)\n            }).catch(() => {\n            this.$message({\n                type: 'info',\n                message: '已取消删除'\n            });          \n            });\n        },\n        handleSelectionChange(v) {\n            this.multipleSelection = v;\n        },\n        handleMultipleDelete() {\n            if (this.multipleSelection.length === 0) {\n                this.$message.info(\"请先选中数据\");\n                return;\n            }\n            this.$confirm(\"此操作将永久删除所有选中的记录, 是否继续?\", \"提示\", {\n                confirmButtonText: \"确定\",\n                cancelButtonText: \"取消\",\n                type: \"warning\",\n            }).then(() => {\n                    let tids = [];\n                    this.multipleSelection.forEach((item) => {\n                        tids.push(item.tId);\n                    });\n                    const formData = new FormData();\n                    formData.append(\"tIds\", tids);\n                    this.$axios\n                        .post(`/Type/DeleteTypeByTid/`, formData)\n                        .then((response) => {\n                            if (response.data.flag) {\n                                this.$message.success(response.data.msg);\n                                this.getTypesList()\n                            } else {\n                                this.$message.error(response.data.msg);\n                            }\n                        });\n                })\n                .catch(() => {\n                    this.$message({\n                        type: \"info\",\n                        message: \"已取消删除\",\n                    });\n                });\n        },\n    },\n    computed: {\n      uid() {\n        return this.$store.getters['getUserId']\n      },\n      username() {\n        return this.$store.getters['getUsername']\n      }\n    },\n    created() {\n      this.getTypesList()\n    }\n}\n</script>\n\n<style scoped>\n.title {\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\n.content {\n  padding: 12px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n}\n\n.opts {\n  margin-bottom: 20px;\n}\n\n.add {\n  margin-right: 10px;\n}\n\n.pigination {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}