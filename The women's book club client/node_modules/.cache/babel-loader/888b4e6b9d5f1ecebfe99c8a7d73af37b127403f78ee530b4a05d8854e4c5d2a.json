{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'AIChat',\n  data() {\n    return {\n      messageList: [\n        // {\n        //     type: 'receive',\n        //     content: '123'\n        // },\n        // {\n        //     type: 'send',\n        //     content: 'asdhf'\n        // }\n      ],\n      keywords: '',\n      isLoading: false,\n      isIcon: true\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.isLoading) {\n        return;\n      }\n      if (!this.keywords || this.keywords === '\\n' || this.keywords === '\\r') {\n        this.$message.info('请输入问题');\n        return;\n      }\n      console.log(this.keywords);\n      this.isLoading = true;\n      this.messageList.push({\n        type: 'send',\n        content: this.keywords\n      });\n      this.$nextTick(() => {\n        this.$refs.mc.scrollTop = '10000000';\n      });\n      this.getAnswer(this.keywords);\n      this.keywords = '';\n    },\n    getAnswer(keywords) {\n      this.$axios.post('https://api.openai.com/v1/chat/completions', {\n        \"model\": \"gpt-3.5-turbo\",\n        \"messages\": [{\n          \"role\": \"user\",\n          \"content\": keywords\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer 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\"\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          this.messageList.push({\n            type: 'receive',\n            content: response.data.choices[0].message.content\n          });\n        }\n        this.isLoading = false;\n        this.$nextTick(() => {\n          this.$refs.mc.scrollTop = '10000000';\n        });\n      });\n    }\n  },\n  computed: {\n    userImage() {\n      return this.$store.getters['getUserPhoto'];\n    }\n  },\n  mounted() {\n    // window.addEventListener('keyup', (e) => {\n    //     if (e.target.localName === 'textarea' && e.code === 'Enter') {\n    //         e.preventDefault()\n    //         this.sendMessage()\n    //     }\n    // })\n  }\n};","map":{"version":3,"mappings":";AAuBA;EACAA;EACAC;IACA;MACAC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAAA,CACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;QACA;MACA;MACA;QACA;QACA;MACA;MACAC;MACA;MACA;QACAC;QACAC;MACA;MACA;QACA;MACA;MACA;MACA;IAEA;IAEAC;MACA;QACA;QACA;UAAA;UAAA;QAAA;MAEA;QACAC;UACA;UACA;QACA;MACA;QACA;UACA;YACAH;YACAC;UACA;QACA;QACA;QACA;UACA;QACA;MACA;IACA;EACA;EACAG;IACAC;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;AAEA","names":["name","data","messageList","keywords","isLoading","isIcon","methods","sendMessage","console","type","content","getAnswer","headers","computed","userImage","mounted"],"sourceRoot":"src/components","sources":["AIChat.vue"],"sourcesContent":["<template>\n  <div :class=\"isIcon ? 'chat icon' : 'chat'\">\n    <i class=\"el-icon-error close\" @click=\"isIcon = true\"></i>\n    <div class=\"title\">和chat-gpt聊天</div>\n    <div class=\"loading\"><span v-show=\"isLoading\">chat-gpt正在输入……</span></div>\n    <ul class=\"msg-content\" ref=\"mc\">\n        <li v-for=\"(item, index) in messageList\" :key=\"index\" :class=\"item.type\">\n            <img v-if=\"item.type === 'receive'\" src=\"../assets/images/ai.png\" alt=\"\" srcset=\"\">\n            <img v-if=\"item.type === 'send'\" :src=\"userImage\" alt=\"\" srcset=\"\">\n            <div class=\"message-box\">\n                {{item.content}}\n            </div>\n        </li>\n    </ul>\n    <div class=\"ipt-content\">\n        <textarea ref=\"t\" v-model=\"keywords\" name=\"\" id=\"\" cols=\"30\" rows=\"10\" placeholder=\"输入你的问题\"></textarea>\n        <button class=\"btn submit\" @click=\"sendMessage\">发送</button>\n    </div>\n    <div class=\"mask\" v-show=\"isIcon\" @click=\"isIcon = false\">AI</div>\n  </div>\n</template>\n\n<script>\nexport default {\n    name: 'AIChat',\n    data() {\n        return {\n            messageList: [\n                // {\n                //     type: 'receive',\n                //     content: '123'\n                // },\n                // {\n                //     type: 'send',\n                //     content: 'asdhf'\n                // }\n            ],\n            keywords: '',\n            isLoading: false,\n            isIcon: true,\n        }\n    },\n    methods: {\n        sendMessage() {\n            if (this.isLoading) {\n                return\n            }\n            if (!this.keywords || this.keywords === '\\n' || this.keywords === '\\r') {\n                this.$message.info('请输入问题')\n                return\n            }\n            console.log(this.keywords);\n            this.isLoading = true\n            this.messageList.push({\n                type: 'send',\n                content: this.keywords\n            })\n            this.$nextTick(() => {\n                this.$refs.mc.scrollTop = '10000000'\n            })\n            this.getAnswer(this.keywords)\n            this.keywords = ''\n            \n        },\n\n        getAnswer(keywords) {\n            this.$axios.post('https://api.openai.com/v1/chat/completions', {\n                \"model\": \"gpt-3.5-turbo\",\n                \"messages\": [{\"role\": \"user\", \"content\": keywords}]\n\n            }, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer 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\"\n                }\n            }).then(response => {\n                if (response.status === 200) {\n                    this.messageList.push({\n                        type: 'receive',\n                        content: response.data.choices[0].message.content\n                    })\n                }\n                this.isLoading = false\n                this.$nextTick(() => {\n                    this.$refs.mc.scrollTop = '10000000'\n                })\n            })\n        },\n    },\n    computed: {\n        userImage() {\n            return this.$store.getters['getUserPhoto']\n        }\n    },\n    mounted() {\n        // window.addEventListener('keyup', (e) => {\n        //     if (e.target.localName === 'textarea' && e.code === 'Enter') {\n        //         e.preventDefault()\n        //         this.sendMessage()\n        //     }\n        // })\n    },\n}\n</script>\n\n<style scoped>\n.chat {\n    overflow: hidden;\n    position: absolute;\n    bottom: 20px;\n    right: 20px;\n    width: 500px;\n    height: 700px;\n    background-color: #fff;\n    z-index: 999;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 30px 2px rgba(0, 0, 0, 0.3);\n    transition: all .3s;\n}\n\n.title {\n    font-size: 24px;\n    height: 30px;\n    line-height: 30px;\n    margin-bottom: 10px;\n    text-align: center;\n}\n\n.loading {\n    height: 20px;\n    text-align: center;\n    color: #696969;\n    font-size: 12px;\n}\n\n.msg-content {\n    overflow-y: scroll;\n    width: 100%;\n    height: 390px;\n    background-color: rgb(236, 234, 234);\n    padding: 10px;\n}\n\n.msg-content li {\n    display: flex;\n    align-content: center;\n    /* background-color: red; */\n    margin-bottom: 20px;\n}\n\n.msg-content li img {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n}\n\n.message-box {\n    max-width: 240px;\n    min-width: 60px;\n    /* height: 40px; */\n    background-color: #fff;\n    padding: 10px;\n    border-radius: 5px;\n    margin-left: 10px;\n}\n\n.send {\n    flex-direction: row-reverse;\n}\n\n.send .message-box {\n    margin-right: 10px;\n    margin-left: 0;\n    background-color: rgb(90, 162, 250);\n    color: #fff;\n}\n\n.ipt-content {\n    position: relative;\n    height: 140px;\n    /* background-color: aliceblue; */\n}\n\n.ipt-content textarea {\n    width: 100%;\n    height: 100%;\n    border: none;\n    /* background-color: red; */\n    background-color: transparent;\n    padding: 10px 0;\n    font-size: 16px;\n    resize: none;\n    outline: none;\n}\n\n.submit {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n}\n\n.close {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    font-size: 20px;\n    color: #6a9af1;\n}\n\n.icon {\n    width: 40px;\n    height: 40px;\n}\n\n.icon .mask {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    line-height: 40px;\n    background-color: #6a9af1;\n    z-index: 100000;\n    text-align: center;\n    color: #fff;\n    cursor: pointer;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}